{"ast":null,"code":"import { Router } from '@angular/router';\nimport { UserAuthService } from '../Services/user-auth.service';\nimport { inject } from '@angular/core';\nexport const adminGuard = (route, state) => {\n  const authService = inject(UserAuthService);\n  const router = inject(Router);\n  if (authService.isLoggedIn && JSON.parse(authService.isLoggedInUserName()).firstName == 'admin') {\n    return true;\n  } else {\n    alert('Only for Admins');\n    // alert(JSON.parse(authService.isLoggedInUserName()).firstName == 'admin');\n    router.navigate(['/home']);\n    return false;\n  }\n};","map":{"version":3,"names":["Router","UserAuthService","inject","adminGuard","route","state","authService","router","isLoggedIn","JSON","parse","isLoggedInUserName","firstName","alert","navigate"],"sources":["/home/abdelslam/Desktop/Projects/Angular-noon-project/client/src/app/Guards/admin.guard.ts"],"sourcesContent":["import { CanActivateFn, Router } from '@angular/router';\nimport { UserAuthService } from '../Services/user-auth.service';\nimport { inject } from '@angular/core';\n\nexport const adminGuard: CanActivateFn = (route, state) => {\n  const authService = inject(UserAuthService);\n  const router = inject(Router);\n  if (\n    authService.isLoggedIn &&\n    JSON.parse(authService.isLoggedInUserName()).firstName == 'admin'\n  ) {\n    return true;\n  } else {\n    alert('Only for Admins');\n    // alert(JSON.parse(authService.isLoggedInUserName()).firstName == 'admin');\n    router.navigate(['/home']);\n    return false;\n  }\n};\n"],"mappings":"AAAA,SAAwBA,MAAM,QAAQ,iBAAiB;AACvD,SAASC,eAAe,QAAQ,+BAA+B;AAC/D,SAASC,MAAM,QAAQ,eAAe;AAEtC,OAAO,MAAMC,UAAU,GAAkBA,CAACC,KAAK,EAAEC,KAAK,KAAI;EACxD,MAAMC,WAAW,GAAGJ,MAAM,CAACD,eAAe,CAAC;EAC3C,MAAMM,MAAM,GAAGL,MAAM,CAACF,MAAM,CAAC;EAC7B,IACEM,WAAW,CAACE,UAAU,IACtBC,IAAI,CAACC,KAAK,CAACJ,WAAW,CAACK,kBAAkB,EAAE,CAAC,CAACC,SAAS,IAAI,OAAO,EACjE;IACA,OAAO,IAAI;GACZ,MAAM;IACLC,KAAK,CAAC,iBAAiB,CAAC;IACxB;IACAN,MAAM,CAACO,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;IAC1B,OAAO,KAAK;;AAEhB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}